<?php
/**
 * BookingApi
 * PHP version 5
 *
 * @category Class
 * @package  EmanuelBuss\ApitudeTransfer
 * @author   Emanuel Karlsson <emanuel.karlsson@rolfsbuss.se>
 * @link     https://github.com/emanuelbuss/apitudetransfer
 */

/**
 * Transfer Booking API
 *
 * # APItude Transfer Booking API  APItude also includes now the ability to book transfers. This API will provide you with availability for transfer services and allow you to distribute those not only through the websites but also is thought to support mobile and tablets.  APItude for transfers API is designed to provide Hotelbeds Group clients with a set of API calls to:   * Enable the construction or creation of a complete transfer website or mobile application (app) * Integrate transfer services into existing systems both internal and external. * Integrate transfers contents for transfers into a common CMS for all the products being distributed.  **Transfer Booking API** provides all the needed calls (operations) to develop your booking funnel, confirm a booking and obtain the relevant information for a customer to enjoy the transfer service that he or she bought.  To obtain and cache the static content you can use [Transfers Cache API](), an API designed to return all the static information needed to operate the Transfers BookingAPI as quickly and simple as possible.
 *
 * OpenAPI spec version: 1.0
 * Contact: integrations.btb@hotelbeds.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.24
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/emanuelbuss/apitudetransfer
 * Do not edit the class manually.
 */

namespace EmanuelBuss\ApitudeTransfer\APITudeTransfer;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use EmanuelBuss\ApitudeTransfer\ApiException;
use EmanuelBuss\ApitudeTransfer\Configuration;
use EmanuelBuss\ApitudeTransfer\HeaderSelector;
use EmanuelBuss\ApitudeTransfer\ObjectSerializer;

/**
 * BookingApi Class Doc Comment
 *
 * @category Class
 * @package  EmanuelBuss\ApitudeTransfer
 * @author   Emanuel Karlsson <emanuel.karlsson@rolfsbuss.se>
 * @link     https://github.com/emanuelbuss/apitudetransfer
 */
class BookingApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation booking
     *
     * Cancel transfers bookings
     *
     * @param  string $language language iso code of response (required)
     * @param  string $reference reference (required)
     * @param  bool $simulation simulation (optional, default to false)
     *
     * @throws \EmanuelBuss\ApitudeTransfer\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \EmanuelBuss\ApitudeTransfer\Model\BookingResponse
     */
    public function booking($language, $reference, $simulation = 'false')
    {
        list($response) = $this->bookingWithHttpInfo($language, $reference, $simulation);
        return $response;
    }

    /**
     * Operation bookingWithHttpInfo
     *
     * Cancel transfers bookings
     *
     * @param  string $language language iso code of response (required)
     * @param  string $reference reference (required)
     * @param  bool $simulation simulation (optional, default to false)
     *
     * @throws \EmanuelBuss\ApitudeTransfer\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \EmanuelBuss\ApitudeTransfer\Model\BookingResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function bookingWithHttpInfo($language, $reference, $simulation = 'false')
    {
        $returnType = '\EmanuelBuss\ApitudeTransfer\Model\BookingResponse';
        $request = $this->bookingRequest($language, $reference, $simulation);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EmanuelBuss\ApitudeTransfer\Model\BookingResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EmanuelBuss\ApitudeTransfer\Model\BookingResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation bookingAsync
     *
     * Cancel transfers bookings
     *
     * @param  string $language language iso code of response (required)
     * @param  string $reference reference (required)
     * @param  bool $simulation simulation (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bookingAsync($language, $reference, $simulation = 'false')
    {
        return $this->bookingAsyncWithHttpInfo($language, $reference, $simulation)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation bookingAsyncWithHttpInfo
     *
     * Cancel transfers bookings
     *
     * @param  string $language language iso code of response (required)
     * @param  string $reference reference (required)
     * @param  bool $simulation simulation (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bookingAsyncWithHttpInfo($language, $reference, $simulation = 'false')
    {
        $returnType = '\EmanuelBuss\ApitudeTransfer\Model\BookingResponse';
        $request = $this->bookingRequest($language, $reference, $simulation);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'booking'
     *
     * @param  string $language language iso code of response (required)
     * @param  string $reference reference (required)
     * @param  bool $simulation simulation (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function bookingRequest($language, $reference, $simulation = 'false')
    {
        // verify the required parameter 'language' is set
        if ($language === null || (is_array($language) && count($language) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $language when calling booking'
            );
        }
        // verify the required parameter 'reference' is set
        if ($reference === null || (is_array($reference) && count($reference) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $reference when calling booking'
            );
        }

        $resourcePath = '/booking/{language}/reference/{reference}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($simulation !== null) {
            $queryParams['simulation'] = ObjectSerializer::toQueryValue($simulation, null);
        }

        // path params
        if ($language !== null) {
            $resourcePath = str_replace(
                '{' . 'language' . '}',
                ObjectSerializer::toPathValue($language),
                $resourcePath
            );
        }
        // path params
        if ($reference !== null) {
            $resourcePath = str_replace(
                '{' . 'reference' . '}',
                ObjectSerializer::toPathValue($reference),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json;charset=UTF-8']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json;charset=UTF-8'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Api-key');
        if ($apiKey !== null) {
            $headers['Api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation booking1
     *
     * Cancel transfers bookings
     *
     * @param  string $language language iso code of response (required)
     * @param  string $reference reference (required)
     * @param  bool $simulation simulation (optional, default to false)
     *
     * @throws \EmanuelBuss\ApitudeTransfer\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \EmanuelBuss\ApitudeTransfer\Model\BookingResponse
     */
    public function booking1($language, $reference, $simulation = 'false')
    {
        list($response) = $this->booking1WithHttpInfo($language, $reference, $simulation);
        return $response;
    }

    /**
     * Operation booking1WithHttpInfo
     *
     * Cancel transfers bookings
     *
     * @param  string $language language iso code of response (required)
     * @param  string $reference reference (required)
     * @param  bool $simulation simulation (optional, default to false)
     *
     * @throws \EmanuelBuss\ApitudeTransfer\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \EmanuelBuss\ApitudeTransfer\Model\BookingResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function booking1WithHttpInfo($language, $reference, $simulation = 'false')
    {
        $returnType = '\EmanuelBuss\ApitudeTransfer\Model\BookingResponse';
        $request = $this->booking1Request($language, $reference, $simulation);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EmanuelBuss\ApitudeTransfer\Model\BookingResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EmanuelBuss\ApitudeTransfer\Model\BookingResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation booking1Async
     *
     * Cancel transfers bookings
     *
     * @param  string $language language iso code of response (required)
     * @param  string $reference reference (required)
     * @param  bool $simulation simulation (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function booking1Async($language, $reference, $simulation = 'false')
    {
        return $this->booking1AsyncWithHttpInfo($language, $reference, $simulation)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation booking1AsyncWithHttpInfo
     *
     * Cancel transfers bookings
     *
     * @param  string $language language iso code of response (required)
     * @param  string $reference reference (required)
     * @param  bool $simulation simulation (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function booking1AsyncWithHttpInfo($language, $reference, $simulation = 'false')
    {
        $returnType = '\EmanuelBuss\ApitudeTransfer\Model\BookingResponse';
        $request = $this->booking1Request($language, $reference, $simulation);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'booking1'
     *
     * @param  string $language language iso code of response (required)
     * @param  string $reference reference (required)
     * @param  bool $simulation simulation (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function booking1Request($language, $reference, $simulation = 'false')
    {
        // verify the required parameter 'language' is set
        if ($language === null || (is_array($language) && count($language) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $language when calling booking1'
            );
        }
        // verify the required parameter 'reference' is set
        if ($reference === null || (is_array($reference) && count($reference) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $reference when calling booking1'
            );
        }

        $resourcePath = '/bookings/{language}/reference/{reference}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($simulation !== null) {
            $queryParams['simulation'] = ObjectSerializer::toQueryValue($simulation, null);
        }

        // path params
        if ($language !== null) {
            $resourcePath = str_replace(
                '{' . 'language' . '}',
                ObjectSerializer::toPathValue($language),
                $resourcePath
            );
        }
        // path params
        if ($reference !== null) {
            $resourcePath = str_replace(
                '{' . 'reference' . '}',
                ObjectSerializer::toPathValue($reference),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json;charset=UTF-8']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json;charset=UTF-8'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Api-key');
        if ($apiKey !== null) {
            $headers['Api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation booking2
     *
     * Confirm transfers bookings
     *
     * @param  \EmanuelBuss\ApitudeTransfer\Model\ConfirmRequest $body confirmRequestDTO (required)
     * @param  string $x_platform_id X-Platform-ID (optional)
     *
     * @throws \EmanuelBuss\ApitudeTransfer\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \EmanuelBuss\ApitudeTransfer\Model\BookingResponse
     */
    public function booking2($body, $x_platform_id = null)
    {
        list($response) = $this->booking2WithHttpInfo($body, $x_platform_id);
        return $response;
    }

    /**
     * Operation booking2WithHttpInfo
     *
     * Confirm transfers bookings
     *
     * @param  \EmanuelBuss\ApitudeTransfer\Model\ConfirmRequest $body confirmRequestDTO (required)
     * @param  string $x_platform_id X-Platform-ID (optional)
     *
     * @throws \EmanuelBuss\ApitudeTransfer\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \EmanuelBuss\ApitudeTransfer\Model\BookingResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function booking2WithHttpInfo($body, $x_platform_id = null)
    {
        $returnType = '\EmanuelBuss\ApitudeTransfer\Model\BookingResponse';
        $request = $this->booking2Request($body, $x_platform_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EmanuelBuss\ApitudeTransfer\Model\BookingResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EmanuelBuss\ApitudeTransfer\Model\BookingResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation booking2Async
     *
     * Confirm transfers bookings
     *
     * @param  \EmanuelBuss\ApitudeTransfer\Model\ConfirmRequest $body confirmRequestDTO (required)
     * @param  string $x_platform_id X-Platform-ID (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function booking2Async($body, $x_platform_id = null)
    {
        return $this->booking2AsyncWithHttpInfo($body, $x_platform_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation booking2AsyncWithHttpInfo
     *
     * Confirm transfers bookings
     *
     * @param  \EmanuelBuss\ApitudeTransfer\Model\ConfirmRequest $body confirmRequestDTO (required)
     * @param  string $x_platform_id X-Platform-ID (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function booking2AsyncWithHttpInfo($body, $x_platform_id = null)
    {
        $returnType = '\EmanuelBuss\ApitudeTransfer\Model\BookingResponse';
        $request = $this->booking2Request($body, $x_platform_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'booking2'
     *
     * @param  \EmanuelBuss\ApitudeTransfer\Model\ConfirmRequest $body confirmRequestDTO (required)
     * @param  string $x_platform_id X-Platform-ID (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function booking2Request($body, $x_platform_id = null)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling booking2'
            );
        }

        $resourcePath = '/booking';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($x_platform_id !== null) {
            $headerParams['X-Platform-ID'] = ObjectSerializer::toHeaderValue($x_platform_id);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json;charset=UTF-8']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json;charset=UTF-8'],
                ['application/json;charset=UTF-8']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Api-key');
        if ($apiKey !== null) {
            $headers['Api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation booking3
     *
     * Confirm transfers bookings
     *
     * @param  \EmanuelBuss\ApitudeTransfer\Model\ConfirmRequest $body confirmRequestDTO (required)
     * @param  string $x_platform_id X-Platform-ID (optional)
     *
     * @throws \EmanuelBuss\ApitudeTransfer\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \EmanuelBuss\ApitudeTransfer\Model\BookingResponse
     */
    public function booking3($body, $x_platform_id = null)
    {
        list($response) = $this->booking3WithHttpInfo($body, $x_platform_id);
        return $response;
    }

    /**
     * Operation booking3WithHttpInfo
     *
     * Confirm transfers bookings
     *
     * @param  \EmanuelBuss\ApitudeTransfer\Model\ConfirmRequest $body confirmRequestDTO (required)
     * @param  string $x_platform_id X-Platform-ID (optional)
     *
     * @throws \EmanuelBuss\ApitudeTransfer\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \EmanuelBuss\ApitudeTransfer\Model\BookingResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function booking3WithHttpInfo($body, $x_platform_id = null)
    {
        $returnType = '\EmanuelBuss\ApitudeTransfer\Model\BookingResponse';
        $request = $this->booking3Request($body, $x_platform_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EmanuelBuss\ApitudeTransfer\Model\BookingResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EmanuelBuss\ApitudeTransfer\Model\BookingResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation booking3Async
     *
     * Confirm transfers bookings
     *
     * @param  \EmanuelBuss\ApitudeTransfer\Model\ConfirmRequest $body confirmRequestDTO (required)
     * @param  string $x_platform_id X-Platform-ID (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function booking3Async($body, $x_platform_id = null)
    {
        return $this->booking3AsyncWithHttpInfo($body, $x_platform_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation booking3AsyncWithHttpInfo
     *
     * Confirm transfers bookings
     *
     * @param  \EmanuelBuss\ApitudeTransfer\Model\ConfirmRequest $body confirmRequestDTO (required)
     * @param  string $x_platform_id X-Platform-ID (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function booking3AsyncWithHttpInfo($body, $x_platform_id = null)
    {
        $returnType = '\EmanuelBuss\ApitudeTransfer\Model\BookingResponse';
        $request = $this->booking3Request($body, $x_platform_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'booking3'
     *
     * @param  \EmanuelBuss\ApitudeTransfer\Model\ConfirmRequest $body confirmRequestDTO (required)
     * @param  string $x_platform_id X-Platform-ID (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function booking3Request($body, $x_platform_id = null)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling booking3'
            );
        }

        $resourcePath = '/bookings';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($x_platform_id !== null) {
            $headerParams['X-Platform-ID'] = ObjectSerializer::toHeaderValue($x_platform_id);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json;charset=UTF-8']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json;charset=UTF-8'],
                ['application/json;charset=UTF-8']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Api-key');
        if ($apiKey !== null) {
            $headers['Api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation booking4
     *
     * Get a bookings confirmed
     *
     * @param  string $language language iso code of response (required)
     * @param  string $reference reference (required)
     *
     * @throws \EmanuelBuss\ApitudeTransfer\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \EmanuelBuss\ApitudeTransfer\Model\BookingResponse
     */
    public function booking4($language, $reference)
    {
        list($response) = $this->booking4WithHttpInfo($language, $reference);
        return $response;
    }

    /**
     * Operation booking4WithHttpInfo
     *
     * Get a bookings confirmed
     *
     * @param  string $language language iso code of response (required)
     * @param  string $reference reference (required)
     *
     * @throws \EmanuelBuss\ApitudeTransfer\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \EmanuelBuss\ApitudeTransfer\Model\BookingResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function booking4WithHttpInfo($language, $reference)
    {
        $returnType = '\EmanuelBuss\ApitudeTransfer\Model\BookingResponse';
        $request = $this->booking4Request($language, $reference);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EmanuelBuss\ApitudeTransfer\Model\BookingResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EmanuelBuss\ApitudeTransfer\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EmanuelBuss\ApitudeTransfer\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EmanuelBuss\ApitudeTransfer\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation booking4Async
     *
     * Get a bookings confirmed
     *
     * @param  string $language language iso code of response (required)
     * @param  string $reference reference (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function booking4Async($language, $reference)
    {
        return $this->booking4AsyncWithHttpInfo($language, $reference)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation booking4AsyncWithHttpInfo
     *
     * Get a bookings confirmed
     *
     * @param  string $language language iso code of response (required)
     * @param  string $reference reference (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function booking4AsyncWithHttpInfo($language, $reference)
    {
        $returnType = '\EmanuelBuss\ApitudeTransfer\Model\BookingResponse';
        $request = $this->booking4Request($language, $reference);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'booking4'
     *
     * @param  string $language language iso code of response (required)
     * @param  string $reference reference (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function booking4Request($language, $reference)
    {
        // verify the required parameter 'language' is set
        if ($language === null || (is_array($language) && count($language) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $language when calling booking4'
            );
        }
        // verify the required parameter 'reference' is set
        if ($reference === null || (is_array($reference) && count($reference) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $reference when calling booking4'
            );
        }

        $resourcePath = '/booking/{language}/reference/{reference}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($language !== null) {
            $resourcePath = str_replace(
                '{' . 'language' . '}',
                ObjectSerializer::toPathValue($language),
                $resourcePath
            );
        }
        // path params
        if ($reference !== null) {
            $resourcePath = str_replace(
                '{' . 'reference' . '}',
                ObjectSerializer::toPathValue($reference),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json;charset=UTF-8']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json;charset=UTF-8'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Api-key');
        if ($apiKey !== null) {
            $headers['Api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation booking5
     *
     * Get a bookings confirmed
     *
     * @param  string $language language iso code of response (required)
     * @param  string $reference reference (required)
     *
     * @throws \EmanuelBuss\ApitudeTransfer\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \EmanuelBuss\ApitudeTransfer\Model\BookingResponse
     */
    public function booking5($language, $reference)
    {
        list($response) = $this->booking5WithHttpInfo($language, $reference);
        return $response;
    }

    /**
     * Operation booking5WithHttpInfo
     *
     * Get a bookings confirmed
     *
     * @param  string $language language iso code of response (required)
     * @param  string $reference reference (required)
     *
     * @throws \EmanuelBuss\ApitudeTransfer\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \EmanuelBuss\ApitudeTransfer\Model\BookingResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function booking5WithHttpInfo($language, $reference)
    {
        $returnType = '\EmanuelBuss\ApitudeTransfer\Model\BookingResponse';
        $request = $this->booking5Request($language, $reference);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EmanuelBuss\ApitudeTransfer\Model\BookingResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EmanuelBuss\ApitudeTransfer\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EmanuelBuss\ApitudeTransfer\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EmanuelBuss\ApitudeTransfer\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation booking5Async
     *
     * Get a bookings confirmed
     *
     * @param  string $language language iso code of response (required)
     * @param  string $reference reference (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function booking5Async($language, $reference)
    {
        return $this->booking5AsyncWithHttpInfo($language, $reference)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation booking5AsyncWithHttpInfo
     *
     * Get a bookings confirmed
     *
     * @param  string $language language iso code of response (required)
     * @param  string $reference reference (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function booking5AsyncWithHttpInfo($language, $reference)
    {
        $returnType = '\EmanuelBuss\ApitudeTransfer\Model\BookingResponse';
        $request = $this->booking5Request($language, $reference);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'booking5'
     *
     * @param  string $language language iso code of response (required)
     * @param  string $reference reference (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function booking5Request($language, $reference)
    {
        // verify the required parameter 'language' is set
        if ($language === null || (is_array($language) && count($language) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $language when calling booking5'
            );
        }
        // verify the required parameter 'reference' is set
        if ($reference === null || (is_array($reference) && count($reference) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $reference when calling booking5'
            );
        }

        $resourcePath = '/bookings/{language}/reference/{reference}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($language !== null) {
            $resourcePath = str_replace(
                '{' . 'language' . '}',
                ObjectSerializer::toPathValue($language),
                $resourcePath
            );
        }
        // path params
        if ($reference !== null) {
            $resourcePath = str_replace(
                '{' . 'reference' . '}',
                ObjectSerializer::toPathValue($reference),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json;charset=UTF-8']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json;charset=UTF-8'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Api-key');
        if ($apiKey !== null) {
            $headers['Api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation booking6
     *
     * Get a booking list
     *
     * @param  string $language language iso code of response (required)
     * @param  string $from_date fromDate (optional)
     * @param  string $to_date toDate (optional)
     * @param  string $date_type dateType, possible values FROM_DATE, CREATION_DATE (optional)
     * @param  int $offset Used for pagination. Index of the item from which the list will be generated in the response object. (optional, default to 1)
     * @param  int $limit Used for pagination. Number of items from the index indicated by the offset parameter that will be included in the response object. (optional, default to 1)
     * @param  string $agency Used for filtering results. Bookings that belong to the agency specified by the reference. (optional)
     * @param  string $surname Used for filtering results. Bookings that were created by the user specified by surname. (optional)
     *
     * @throws \EmanuelBuss\ApitudeTransfer\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \EmanuelBuss\ApitudeTransfer\Model\BookingListResponse
     */
    public function booking6($language, $from_date = null, $to_date = null, $date_type = null, $offset = '1', $limit = '1', $agency = null, $surname = null)
    {
        list($response) = $this->booking6WithHttpInfo($language, $from_date, $to_date, $date_type, $offset, $limit, $agency, $surname);
        return $response;
    }

    /**
     * Operation booking6WithHttpInfo
     *
     * Get a booking list
     *
     * @param  string $language language iso code of response (required)
     * @param  string $from_date fromDate (optional)
     * @param  string $to_date toDate (optional)
     * @param  string $date_type dateType, possible values FROM_DATE, CREATION_DATE (optional)
     * @param  int $offset Used for pagination. Index of the item from which the list will be generated in the response object. (optional, default to 1)
     * @param  int $limit Used for pagination. Number of items from the index indicated by the offset parameter that will be included in the response object. (optional, default to 1)
     * @param  string $agency Used for filtering results. Bookings that belong to the agency specified by the reference. (optional)
     * @param  string $surname Used for filtering results. Bookings that were created by the user specified by surname. (optional)
     *
     * @throws \EmanuelBuss\ApitudeTransfer\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \EmanuelBuss\ApitudeTransfer\Model\BookingListResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function booking6WithHttpInfo($language, $from_date = null, $to_date = null, $date_type = null, $offset = '1', $limit = '1', $agency = null, $surname = null)
    {
        $returnType = '\EmanuelBuss\ApitudeTransfer\Model\BookingListResponse';
        $request = $this->booking6Request($language, $from_date, $to_date, $date_type, $offset, $limit, $agency, $surname);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EmanuelBuss\ApitudeTransfer\Model\BookingListResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EmanuelBuss\ApitudeTransfer\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EmanuelBuss\ApitudeTransfer\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EmanuelBuss\ApitudeTransfer\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation booking6Async
     *
     * Get a booking list
     *
     * @param  string $language language iso code of response (required)
     * @param  string $from_date fromDate (optional)
     * @param  string $to_date toDate (optional)
     * @param  string $date_type dateType, possible values FROM_DATE, CREATION_DATE (optional)
     * @param  int $offset Used for pagination. Index of the item from which the list will be generated in the response object. (optional, default to 1)
     * @param  int $limit Used for pagination. Number of items from the index indicated by the offset parameter that will be included in the response object. (optional, default to 1)
     * @param  string $agency Used for filtering results. Bookings that belong to the agency specified by the reference. (optional)
     * @param  string $surname Used for filtering results. Bookings that were created by the user specified by surname. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function booking6Async($language, $from_date = null, $to_date = null, $date_type = null, $offset = '1', $limit = '1', $agency = null, $surname = null)
    {
        return $this->booking6AsyncWithHttpInfo($language, $from_date, $to_date, $date_type, $offset, $limit, $agency, $surname)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation booking6AsyncWithHttpInfo
     *
     * Get a booking list
     *
     * @param  string $language language iso code of response (required)
     * @param  string $from_date fromDate (optional)
     * @param  string $to_date toDate (optional)
     * @param  string $date_type dateType, possible values FROM_DATE, CREATION_DATE (optional)
     * @param  int $offset Used for pagination. Index of the item from which the list will be generated in the response object. (optional, default to 1)
     * @param  int $limit Used for pagination. Number of items from the index indicated by the offset parameter that will be included in the response object. (optional, default to 1)
     * @param  string $agency Used for filtering results. Bookings that belong to the agency specified by the reference. (optional)
     * @param  string $surname Used for filtering results. Bookings that were created by the user specified by surname. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function booking6AsyncWithHttpInfo($language, $from_date = null, $to_date = null, $date_type = null, $offset = '1', $limit = '1', $agency = null, $surname = null)
    {
        $returnType = '\EmanuelBuss\ApitudeTransfer\Model\BookingListResponse';
        $request = $this->booking6Request($language, $from_date, $to_date, $date_type, $offset, $limit, $agency, $surname);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'booking6'
     *
     * @param  string $language language iso code of response (required)
     * @param  string $from_date fromDate (optional)
     * @param  string $to_date toDate (optional)
     * @param  string $date_type dateType, possible values FROM_DATE, CREATION_DATE (optional)
     * @param  int $offset Used for pagination. Index of the item from which the list will be generated in the response object. (optional, default to 1)
     * @param  int $limit Used for pagination. Number of items from the index indicated by the offset parameter that will be included in the response object. (optional, default to 1)
     * @param  string $agency Used for filtering results. Bookings that belong to the agency specified by the reference. (optional)
     * @param  string $surname Used for filtering results. Bookings that were created by the user specified by surname. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function booking6Request($language, $from_date = null, $to_date = null, $date_type = null, $offset = '1', $limit = '1', $agency = null, $surname = null)
    {
        // verify the required parameter 'language' is set
        if ($language === null || (is_array($language) && count($language) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $language when calling booking6'
            );
        }

        $resourcePath = '/bookings/{language}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($from_date !== null) {
            $queryParams['fromDate'] = ObjectSerializer::toQueryValue($from_date, null);
        }
        // query params
        if ($to_date !== null) {
            $queryParams['toDate'] = ObjectSerializer::toQueryValue($to_date, null);
        }
        // query params
        if ($date_type !== null) {
            $queryParams['dateType'] = ObjectSerializer::toQueryValue($date_type, null);
        }
        // query params
        if ($offset !== null) {
            $queryParams['offset'] = ObjectSerializer::toQueryValue($offset, 'int32');
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit, 'int32');
        }
        // query params
        if ($agency !== null) {
            $queryParams['agency'] = ObjectSerializer::toQueryValue($agency, null);
        }
        // query params
        if ($surname !== null) {
            $queryParams['surname'] = ObjectSerializer::toQueryValue($surname, null);
        }

        // path params
        if ($language !== null) {
            $resourcePath = str_replace(
                '{' . 'language' . '}',
                ObjectSerializer::toPathValue($language),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json;charset=UTF-8']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json;charset=UTF-8'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Api-key');
        if ($apiKey !== null) {
            $headers['Api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation booking7
     *
     * Modify transfers bookings
     *
     * @param  string $language language iso code of response (required)
     * @param  string $reference booking reference (required)
     * @param  string $id transfer identifier (required)
     * @param  bool $simulation simulation (optional, default to false)
     *
     * @throws \EmanuelBuss\ApitudeTransfer\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \EmanuelBuss\ApitudeTransfer\Model\BookingResponse
     */
    public function booking7($language, $reference, $id, $simulation = 'false')
    {
        list($response) = $this->booking7WithHttpInfo($language, $reference, $id, $simulation);
        return $response;
    }

    /**
     * Operation booking7WithHttpInfo
     *
     * Modify transfers bookings
     *
     * @param  string $language language iso code of response (required)
     * @param  string $reference booking reference (required)
     * @param  string $id transfer identifier (required)
     * @param  bool $simulation simulation (optional, default to false)
     *
     * @throws \EmanuelBuss\ApitudeTransfer\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \EmanuelBuss\ApitudeTransfer\Model\BookingResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function booking7WithHttpInfo($language, $reference, $id, $simulation = 'false')
    {
        $returnType = '\EmanuelBuss\ApitudeTransfer\Model\BookingResponse';
        $request = $this->booking7Request($language, $reference, $id, $simulation);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EmanuelBuss\ApitudeTransfer\Model\BookingResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EmanuelBuss\ApitudeTransfer\Model\BookingResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation booking7Async
     *
     * Modify transfers bookings
     *
     * @param  string $language language iso code of response (required)
     * @param  string $reference booking reference (required)
     * @param  string $id transfer identifier (required)
     * @param  bool $simulation simulation (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function booking7Async($language, $reference, $id, $simulation = 'false')
    {
        return $this->booking7AsyncWithHttpInfo($language, $reference, $id, $simulation)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation booking7AsyncWithHttpInfo
     *
     * Modify transfers bookings
     *
     * @param  string $language language iso code of response (required)
     * @param  string $reference booking reference (required)
     * @param  string $id transfer identifier (required)
     * @param  bool $simulation simulation (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function booking7AsyncWithHttpInfo($language, $reference, $id, $simulation = 'false')
    {
        $returnType = '\EmanuelBuss\ApitudeTransfer\Model\BookingResponse';
        $request = $this->booking7Request($language, $reference, $id, $simulation);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'booking7'
     *
     * @param  string $language language iso code of response (required)
     * @param  string $reference booking reference (required)
     * @param  string $id transfer identifier (required)
     * @param  bool $simulation simulation (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function booking7Request($language, $reference, $id, $simulation = 'false')
    {
        // verify the required parameter 'language' is set
        if ($language === null || (is_array($language) && count($language) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $language when calling booking7'
            );
        }
        // verify the required parameter 'reference' is set
        if ($reference === null || (is_array($reference) && count($reference) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $reference when calling booking7'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling booking7'
            );
        }

        $resourcePath = '/booking/{language}/reference/{reference}/id/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($simulation !== null) {
            $queryParams['simulation'] = ObjectSerializer::toQueryValue($simulation, null);
        }

        // path params
        if ($language !== null) {
            $resourcePath = str_replace(
                '{' . 'language' . '}',
                ObjectSerializer::toPathValue($language),
                $resourcePath
            );
        }
        // path params
        if ($reference !== null) {
            $resourcePath = str_replace(
                '{' . 'reference' . '}',
                ObjectSerializer::toPathValue($reference),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json;charset=UTF-8']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json;charset=UTF-8'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Api-key');
        if ($apiKey !== null) {
            $headers['Api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation booking8
     *
     * Modify transfers bookings
     *
     * @param  string $language language iso code of response (required)
     * @param  string $reference booking reference (required)
     * @param  string $id transfer identifier (required)
     * @param  bool $simulation simulation (optional, default to false)
     *
     * @throws \EmanuelBuss\ApitudeTransfer\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \EmanuelBuss\ApitudeTransfer\Model\BookingResponse
     */
    public function booking8($language, $reference, $id, $simulation = 'false')
    {
        list($response) = $this->booking8WithHttpInfo($language, $reference, $id, $simulation);
        return $response;
    }

    /**
     * Operation booking8WithHttpInfo
     *
     * Modify transfers bookings
     *
     * @param  string $language language iso code of response (required)
     * @param  string $reference booking reference (required)
     * @param  string $id transfer identifier (required)
     * @param  bool $simulation simulation (optional, default to false)
     *
     * @throws \EmanuelBuss\ApitudeTransfer\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \EmanuelBuss\ApitudeTransfer\Model\BookingResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function booking8WithHttpInfo($language, $reference, $id, $simulation = 'false')
    {
        $returnType = '\EmanuelBuss\ApitudeTransfer\Model\BookingResponse';
        $request = $this->booking8Request($language, $reference, $id, $simulation);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EmanuelBuss\ApitudeTransfer\Model\BookingResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EmanuelBuss\ApitudeTransfer\Model\BookingResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation booking8Async
     *
     * Modify transfers bookings
     *
     * @param  string $language language iso code of response (required)
     * @param  string $reference booking reference (required)
     * @param  string $id transfer identifier (required)
     * @param  bool $simulation simulation (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function booking8Async($language, $reference, $id, $simulation = 'false')
    {
        return $this->booking8AsyncWithHttpInfo($language, $reference, $id, $simulation)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation booking8AsyncWithHttpInfo
     *
     * Modify transfers bookings
     *
     * @param  string $language language iso code of response (required)
     * @param  string $reference booking reference (required)
     * @param  string $id transfer identifier (required)
     * @param  bool $simulation simulation (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function booking8AsyncWithHttpInfo($language, $reference, $id, $simulation = 'false')
    {
        $returnType = '\EmanuelBuss\ApitudeTransfer\Model\BookingResponse';
        $request = $this->booking8Request($language, $reference, $id, $simulation);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'booking8'
     *
     * @param  string $language language iso code of response (required)
     * @param  string $reference booking reference (required)
     * @param  string $id transfer identifier (required)
     * @param  bool $simulation simulation (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function booking8Request($language, $reference, $id, $simulation = 'false')
    {
        // verify the required parameter 'language' is set
        if ($language === null || (is_array($language) && count($language) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $language when calling booking8'
            );
        }
        // verify the required parameter 'reference' is set
        if ($reference === null || (is_array($reference) && count($reference) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $reference when calling booking8'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling booking8'
            );
        }

        $resourcePath = '/bookings/{language}/reference/{reference}/id/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($simulation !== null) {
            $queryParams['simulation'] = ObjectSerializer::toQueryValue($simulation, null);
        }

        // path params
        if ($language !== null) {
            $resourcePath = str_replace(
                '{' . 'language' . '}',
                ObjectSerializer::toPathValue($language),
                $resourcePath
            );
        }
        // path params
        if ($reference !== null) {
            $resourcePath = str_replace(
                '{' . 'reference' . '}',
                ObjectSerializer::toPathValue($reference),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json;charset=UTF-8']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json;charset=UTF-8'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Api-key');
        if ($apiKey !== null) {
            $headers['Api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
