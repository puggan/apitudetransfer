<?php
/**
 * AvailabilityApi
 * PHP version 5
 *
 * @category Class
 * @package  EmanuelBuss\ApitudeTransfer
 * @author   Emanuel Karlsson <emanuel.karlsson@rolfsbuss.se>
 * @link     https://github.com/emanuelbuss/apitudetransfer
 */

/**
 * Transfer Booking API
 *
 * # APItude Transfer Booking API  APItude also includes now the ability to book transfers. This API will provide you with availability for transfer services and allow you to distribute those not only through the websites but also is thought to support mobile and tablets.  APItude for transfers API is designed to provide Hotelbeds Group clients with a set of API calls to:   * Enable the construction or creation of a complete transfer website or mobile application (app) * Integrate transfer services into existing systems both internal and external. * Integrate transfers contents for transfers into a common CMS for all the products being distributed.  **Transfer Booking API** provides all the needed calls (operations) to develop your booking funnel, confirm a booking and obtain the relevant information for a customer to enjoy the transfer service that he or she bought.  To obtain and cache the static content you can use [Transfers Cache API](), an API designed to return all the static information needed to operate the Transfers BookingAPI as quickly and simple as possible.
 *
 * OpenAPI spec version: 1.0
 * Contact: integrations.btb@hotelbeds.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.24
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/emanuelbuss/apitudetransfer
 * Do not edit the class manually.
 */

namespace EmanuelBuss\ApitudeTransfer\APITudeTransfer;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use EmanuelBuss\ApitudeTransfer\ApiException;
use EmanuelBuss\ApitudeTransfer\Configuration;
use EmanuelBuss\ApitudeTransfer\HeaderSelector;
use EmanuelBuss\ApitudeTransfer\ObjectSerializer;

/**
 * AvailabilityApi Class Doc Comment
 *
 * @category Class
 * @package  EmanuelBuss\ApitudeTransfer
 * @author   Emanuel Karlsson <emanuel.karlsson@rolfsbuss.se>
 * @link     https://github.com/emanuelbuss/apitudetransfer
 */
class AvailabilityApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation availability
     *
     * Availability without comeBack parameter
     *
     * @param  string $language language iso code of response (required)
     * @param  string $from_type origin transfer point type (required)
     * @param  string $from_code origin code (required)
     * @param  string $to_type destination transfer point type (required)
     * @param  string $to_code destination code (required)
     * @param  string $outbound departure datetime (required)
     * @param  int $adults number of adults (required)
     * @param  int $children number of children (required)
     * @param  int $infants number of infants (required)
     *
     * @throws \EmanuelBuss\ApitudeTransfer\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \EmanuelBuss\ApitudeTransfer\Model\AvailabilityResponse
     */
    public function availability($language, $from_type, $from_code, $to_type, $to_code, $outbound, $adults, $children, $infants)
    {
        list($response) = $this->availabilityWithHttpInfo($language, $from_type, $from_code, $to_type, $to_code, $outbound, $adults, $children, $infants);
        return $response;
    }

    /**
     * Operation availabilityWithHttpInfo
     *
     * Availability without comeBack parameter
     *
     * @param  string $language language iso code of response (required)
     * @param  string $from_type origin transfer point type (required)
     * @param  string $from_code origin code (required)
     * @param  string $to_type destination transfer point type (required)
     * @param  string $to_code destination code (required)
     * @param  string $outbound departure datetime (required)
     * @param  int $adults number of adults (required)
     * @param  int $children number of children (required)
     * @param  int $infants number of infants (required)
     *
     * @throws \EmanuelBuss\ApitudeTransfer\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \EmanuelBuss\ApitudeTransfer\Model\AvailabilityResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function availabilityWithHttpInfo($language, $from_type, $from_code, $to_type, $to_code, $outbound, $adults, $children, $infants)
    {
        $returnType = '\EmanuelBuss\ApitudeTransfer\Model\AvailabilityResponse';
        $request = $this->availabilityRequest($language, $from_type, $from_code, $to_type, $to_code, $outbound, $adults, $children, $infants);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EmanuelBuss\ApitudeTransfer\Model\AvailabilityResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EmanuelBuss\ApitudeTransfer\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EmanuelBuss\ApitudeTransfer\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EmanuelBuss\ApitudeTransfer\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation availabilityAsync
     *
     * Availability without comeBack parameter
     *
     * @param  string $language language iso code of response (required)
     * @param  string $from_type origin transfer point type (required)
     * @param  string $from_code origin code (required)
     * @param  string $to_type destination transfer point type (required)
     * @param  string $to_code destination code (required)
     * @param  string $outbound departure datetime (required)
     * @param  int $adults number of adults (required)
     * @param  int $children number of children (required)
     * @param  int $infants number of infants (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function availabilityAsync($language, $from_type, $from_code, $to_type, $to_code, $outbound, $adults, $children, $infants)
    {
        return $this->availabilityAsyncWithHttpInfo($language, $from_type, $from_code, $to_type, $to_code, $outbound, $adults, $children, $infants)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation availabilityAsyncWithHttpInfo
     *
     * Availability without comeBack parameter
     *
     * @param  string $language language iso code of response (required)
     * @param  string $from_type origin transfer point type (required)
     * @param  string $from_code origin code (required)
     * @param  string $to_type destination transfer point type (required)
     * @param  string $to_code destination code (required)
     * @param  string $outbound departure datetime (required)
     * @param  int $adults number of adults (required)
     * @param  int $children number of children (required)
     * @param  int $infants number of infants (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function availabilityAsyncWithHttpInfo($language, $from_type, $from_code, $to_type, $to_code, $outbound, $adults, $children, $infants)
    {
        $returnType = '\EmanuelBuss\ApitudeTransfer\Model\AvailabilityResponse';
        $request = $this->availabilityRequest($language, $from_type, $from_code, $to_type, $to_code, $outbound, $adults, $children, $infants);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'availability'
     *
     * @param  string $language language iso code of response (required)
     * @param  string $from_type origin transfer point type (required)
     * @param  string $from_code origin code (required)
     * @param  string $to_type destination transfer point type (required)
     * @param  string $to_code destination code (required)
     * @param  string $outbound departure datetime (required)
     * @param  int $adults number of adults (required)
     * @param  int $children number of children (required)
     * @param  int $infants number of infants (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function availabilityRequest($language, $from_type, $from_code, $to_type, $to_code, $outbound, $adults, $children, $infants)
    {
        // verify the required parameter 'language' is set
        if ($language === null || (is_array($language) && count($language) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $language when calling availability'
            );
        }
        // verify the required parameter 'from_type' is set
        if ($from_type === null || (is_array($from_type) && count($from_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $from_type when calling availability'
            );
        }
        // verify the required parameter 'from_code' is set
        if ($from_code === null || (is_array($from_code) && count($from_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $from_code when calling availability'
            );
        }
        // verify the required parameter 'to_type' is set
        if ($to_type === null || (is_array($to_type) && count($to_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $to_type when calling availability'
            );
        }
        // verify the required parameter 'to_code' is set
        if ($to_code === null || (is_array($to_code) && count($to_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $to_code when calling availability'
            );
        }
        // verify the required parameter 'outbound' is set
        if ($outbound === null || (is_array($outbound) && count($outbound) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $outbound when calling availability'
            );
        }
        // verify the required parameter 'adults' is set
        if ($adults === null || (is_array($adults) && count($adults) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $adults when calling availability'
            );
        }
        // verify the required parameter 'children' is set
        if ($children === null || (is_array($children) && count($children) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $children when calling availability'
            );
        }
        // verify the required parameter 'infants' is set
        if ($infants === null || (is_array($infants) && count($infants) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $infants when calling availability'
            );
        }

        $resourcePath = '/availability/{language}/from/{fromType}/{fromCode}/to/{toType}/{toCode}/{outbound}/{adults}/{children}/{infants}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($language !== null) {
            $resourcePath = str_replace(
                '{' . 'language' . '}',
                ObjectSerializer::toPathValue($language),
                $resourcePath
            );
        }
        // path params
        if ($from_type !== null) {
            $resourcePath = str_replace(
                '{' . 'fromType' . '}',
                ObjectSerializer::toPathValue($from_type),
                $resourcePath
            );
        }
        // path params
        if ($from_code !== null) {
            $resourcePath = str_replace(
                '{' . 'fromCode' . '}',
                ObjectSerializer::toPathValue($from_code),
                $resourcePath
            );
        }
        // path params
        if ($to_type !== null) {
            $resourcePath = str_replace(
                '{' . 'toType' . '}',
                ObjectSerializer::toPathValue($to_type),
                $resourcePath
            );
        }
        // path params
        if ($to_code !== null) {
            $resourcePath = str_replace(
                '{' . 'toCode' . '}',
                ObjectSerializer::toPathValue($to_code),
                $resourcePath
            );
        }
        // path params
        if ($outbound !== null) {
            $resourcePath = str_replace(
                '{' . 'outbound' . '}',
                ObjectSerializer::toPathValue($outbound),
                $resourcePath
            );
        }
        // path params
        if ($adults !== null) {
            $resourcePath = str_replace(
                '{' . 'adults' . '}',
                ObjectSerializer::toPathValue($adults),
                $resourcePath
            );
        }
        // path params
        if ($children !== null) {
            $resourcePath = str_replace(
                '{' . 'children' . '}',
                ObjectSerializer::toPathValue($children),
                $resourcePath
            );
        }
        // path params
        if ($infants !== null) {
            $resourcePath = str_replace(
                '{' . 'infants' . '}',
                ObjectSerializer::toPathValue($infants),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json;charset=UTF-8']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json;charset=UTF-8'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Api-key');
        if ($apiKey !== null) {
            $headers['Api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation availability1
     *
     * Availability with comeBack parameter
     *
     * @param  string $language language iso code of response (required)
     * @param  string $from_type origin transfer point type (required)
     * @param  string $from_code origin code (required)
     * @param  string $to_type destination transfer point type (required)
     * @param  string $to_code destination code (required)
     * @param  string $outbound departure datetime (required)
     * @param  string $inbound return datetime (required)
     * @param  int $adults number of adults (required)
     * @param  int $children number of children (required)
     * @param  int $infants number of infants (required)
     *
     * @throws \EmanuelBuss\ApitudeTransfer\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \EmanuelBuss\ApitudeTransfer\Model\AvailabilityResponse
     */
    public function availability1($language, $from_type, $from_code, $to_type, $to_code, $outbound, $inbound, $adults, $children, $infants)
    {
        list($response) = $this->availability1WithHttpInfo($language, $from_type, $from_code, $to_type, $to_code, $outbound, $inbound, $adults, $children, $infants);
        return $response;
    }

    /**
     * Operation availability1WithHttpInfo
     *
     * Availability with comeBack parameter
     *
     * @param  string $language language iso code of response (required)
     * @param  string $from_type origin transfer point type (required)
     * @param  string $from_code origin code (required)
     * @param  string $to_type destination transfer point type (required)
     * @param  string $to_code destination code (required)
     * @param  string $outbound departure datetime (required)
     * @param  string $inbound return datetime (required)
     * @param  int $adults number of adults (required)
     * @param  int $children number of children (required)
     * @param  int $infants number of infants (required)
     *
     * @throws \EmanuelBuss\ApitudeTransfer\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \EmanuelBuss\ApitudeTransfer\Model\AvailabilityResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function availability1WithHttpInfo($language, $from_type, $from_code, $to_type, $to_code, $outbound, $inbound, $adults, $children, $infants)
    {
        $returnType = '\EmanuelBuss\ApitudeTransfer\Model\AvailabilityResponse';
        $request = $this->availability1Request($language, $from_type, $from_code, $to_type, $to_code, $outbound, $inbound, $adults, $children, $infants);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EmanuelBuss\ApitudeTransfer\Model\AvailabilityResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EmanuelBuss\ApitudeTransfer\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EmanuelBuss\ApitudeTransfer\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EmanuelBuss\ApitudeTransfer\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation availability1Async
     *
     * Availability with comeBack parameter
     *
     * @param  string $language language iso code of response (required)
     * @param  string $from_type origin transfer point type (required)
     * @param  string $from_code origin code (required)
     * @param  string $to_type destination transfer point type (required)
     * @param  string $to_code destination code (required)
     * @param  string $outbound departure datetime (required)
     * @param  string $inbound return datetime (required)
     * @param  int $adults number of adults (required)
     * @param  int $children number of children (required)
     * @param  int $infants number of infants (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function availability1Async($language, $from_type, $from_code, $to_type, $to_code, $outbound, $inbound, $adults, $children, $infants)
    {
        return $this->availability1AsyncWithHttpInfo($language, $from_type, $from_code, $to_type, $to_code, $outbound, $inbound, $adults, $children, $infants)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation availability1AsyncWithHttpInfo
     *
     * Availability with comeBack parameter
     *
     * @param  string $language language iso code of response (required)
     * @param  string $from_type origin transfer point type (required)
     * @param  string $from_code origin code (required)
     * @param  string $to_type destination transfer point type (required)
     * @param  string $to_code destination code (required)
     * @param  string $outbound departure datetime (required)
     * @param  string $inbound return datetime (required)
     * @param  int $adults number of adults (required)
     * @param  int $children number of children (required)
     * @param  int $infants number of infants (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function availability1AsyncWithHttpInfo($language, $from_type, $from_code, $to_type, $to_code, $outbound, $inbound, $adults, $children, $infants)
    {
        $returnType = '\EmanuelBuss\ApitudeTransfer\Model\AvailabilityResponse';
        $request = $this->availability1Request($language, $from_type, $from_code, $to_type, $to_code, $outbound, $inbound, $adults, $children, $infants);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'availability1'
     *
     * @param  string $language language iso code of response (required)
     * @param  string $from_type origin transfer point type (required)
     * @param  string $from_code origin code (required)
     * @param  string $to_type destination transfer point type (required)
     * @param  string $to_code destination code (required)
     * @param  string $outbound departure datetime (required)
     * @param  string $inbound return datetime (required)
     * @param  int $adults number of adults (required)
     * @param  int $children number of children (required)
     * @param  int $infants number of infants (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function availability1Request($language, $from_type, $from_code, $to_type, $to_code, $outbound, $inbound, $adults, $children, $infants)
    {
        // verify the required parameter 'language' is set
        if ($language === null || (is_array($language) && count($language) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $language when calling availability1'
            );
        }
        // verify the required parameter 'from_type' is set
        if ($from_type === null || (is_array($from_type) && count($from_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $from_type when calling availability1'
            );
        }
        // verify the required parameter 'from_code' is set
        if ($from_code === null || (is_array($from_code) && count($from_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $from_code when calling availability1'
            );
        }
        // verify the required parameter 'to_type' is set
        if ($to_type === null || (is_array($to_type) && count($to_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $to_type when calling availability1'
            );
        }
        // verify the required parameter 'to_code' is set
        if ($to_code === null || (is_array($to_code) && count($to_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $to_code when calling availability1'
            );
        }
        // verify the required parameter 'outbound' is set
        if ($outbound === null || (is_array($outbound) && count($outbound) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $outbound when calling availability1'
            );
        }
        // verify the required parameter 'inbound' is set
        if ($inbound === null || (is_array($inbound) && count($inbound) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $inbound when calling availability1'
            );
        }
        // verify the required parameter 'adults' is set
        if ($adults === null || (is_array($adults) && count($adults) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $adults when calling availability1'
            );
        }
        // verify the required parameter 'children' is set
        if ($children === null || (is_array($children) && count($children) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $children when calling availability1'
            );
        }
        // verify the required parameter 'infants' is set
        if ($infants === null || (is_array($infants) && count($infants) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $infants when calling availability1'
            );
        }

        $resourcePath = '/availability/{language}/from/{fromType}/{fromCode}/to/{toType}/{toCode}/{outbound}/{inbound}/{adults}/{children}/{infants}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($language !== null) {
            $resourcePath = str_replace(
                '{' . 'language' . '}',
                ObjectSerializer::toPathValue($language),
                $resourcePath
            );
        }
        // path params
        if ($from_type !== null) {
            $resourcePath = str_replace(
                '{' . 'fromType' . '}',
                ObjectSerializer::toPathValue($from_type),
                $resourcePath
            );
        }
        // path params
        if ($from_code !== null) {
            $resourcePath = str_replace(
                '{' . 'fromCode' . '}',
                ObjectSerializer::toPathValue($from_code),
                $resourcePath
            );
        }
        // path params
        if ($to_type !== null) {
            $resourcePath = str_replace(
                '{' . 'toType' . '}',
                ObjectSerializer::toPathValue($to_type),
                $resourcePath
            );
        }
        // path params
        if ($to_code !== null) {
            $resourcePath = str_replace(
                '{' . 'toCode' . '}',
                ObjectSerializer::toPathValue($to_code),
                $resourcePath
            );
        }
        // path params
        if ($outbound !== null) {
            $resourcePath = str_replace(
                '{' . 'outbound' . '}',
                ObjectSerializer::toPathValue($outbound),
                $resourcePath
            );
        }
        // path params
        if ($inbound !== null) {
            $resourcePath = str_replace(
                '{' . 'inbound' . '}',
                ObjectSerializer::toPathValue($inbound),
                $resourcePath
            );
        }
        // path params
        if ($adults !== null) {
            $resourcePath = str_replace(
                '{' . 'adults' . '}',
                ObjectSerializer::toPathValue($adults),
                $resourcePath
            );
        }
        // path params
        if ($children !== null) {
            $resourcePath = str_replace(
                '{' . 'children' . '}',
                ObjectSerializer::toPathValue($children),
                $resourcePath
            );
        }
        // path params
        if ($infants !== null) {
            $resourcePath = str_replace(
                '{' . 'infants' . '}',
                ObjectSerializer::toPathValue($infants),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json;charset=UTF-8']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json;charset=UTF-8'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Api-key');
        if ($apiKey !== null) {
            $headers['Api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation availability2
     *
     * Availability routes
     *
     * @param  \EmanuelBuss\ApitudeTransfer\Model\RouteRequest[] $body routeRequests (required)
     * @param  string $language language iso code of response (required)
     * @param  int $adults number of adults (required)
     * @param  int $children number of children (required)
     * @param  int $infants number of infants (required)
     * @param  string $vehicle Used for filtering results. Availability routes can be filtered by vehicle. (optional)
     * @param  string $type Used for filtering results. Availability routes can be filtered by type. (optional)
     * @param  string $category Used for filtering results. Availability routes can be filtered by category. (optional)
     * @param  bool $allow_partial_results Show the results of the routes including no results or exception errors (optional, default to true)
     *
     * @throws \EmanuelBuss\ApitudeTransfer\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \EmanuelBuss\ApitudeTransfer\Model\AvailabilityResponse
     */
    public function availability2($body, $language, $adults, $children, $infants, $vehicle = null, $type = null, $category = null, $allow_partial_results = 'true')
    {
        list($response) = $this->availability2WithHttpInfo($body, $language, $adults, $children, $infants, $vehicle, $type, $category, $allow_partial_results);
        return $response;
    }

    /**
     * Operation availability2WithHttpInfo
     *
     * Availability routes
     *
     * @param  \EmanuelBuss\ApitudeTransfer\Model\RouteRequest[] $body routeRequests (required)
     * @param  string $language language iso code of response (required)
     * @param  int $adults number of adults (required)
     * @param  int $children number of children (required)
     * @param  int $infants number of infants (required)
     * @param  string $vehicle Used for filtering results. Availability routes can be filtered by vehicle. (optional)
     * @param  string $type Used for filtering results. Availability routes can be filtered by type. (optional)
     * @param  string $category Used for filtering results. Availability routes can be filtered by category. (optional)
     * @param  bool $allow_partial_results Show the results of the routes including no results or exception errors (optional, default to true)
     *
     * @throws \EmanuelBuss\ApitudeTransfer\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \EmanuelBuss\ApitudeTransfer\Model\AvailabilityResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function availability2WithHttpInfo($body, $language, $adults, $children, $infants, $vehicle = null, $type = null, $category = null, $allow_partial_results = 'true')
    {
        $returnType = '\EmanuelBuss\ApitudeTransfer\Model\AvailabilityResponse';
        $request = $this->availability2Request($body, $language, $adults, $children, $infants, $vehicle, $type, $category, $allow_partial_results);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EmanuelBuss\ApitudeTransfer\Model\AvailabilityResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EmanuelBuss\ApitudeTransfer\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EmanuelBuss\ApitudeTransfer\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EmanuelBuss\ApitudeTransfer\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation availability2Async
     *
     * Availability routes
     *
     * @param  \EmanuelBuss\ApitudeTransfer\Model\RouteRequest[] $body routeRequests (required)
     * @param  string $language language iso code of response (required)
     * @param  int $adults number of adults (required)
     * @param  int $children number of children (required)
     * @param  int $infants number of infants (required)
     * @param  string $vehicle Used for filtering results. Availability routes can be filtered by vehicle. (optional)
     * @param  string $type Used for filtering results. Availability routes can be filtered by type. (optional)
     * @param  string $category Used for filtering results. Availability routes can be filtered by category. (optional)
     * @param  bool $allow_partial_results Show the results of the routes including no results or exception errors (optional, default to true)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function availability2Async($body, $language, $adults, $children, $infants, $vehicle = null, $type = null, $category = null, $allow_partial_results = 'true')
    {
        return $this->availability2AsyncWithHttpInfo($body, $language, $adults, $children, $infants, $vehicle, $type, $category, $allow_partial_results)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation availability2AsyncWithHttpInfo
     *
     * Availability routes
     *
     * @param  \EmanuelBuss\ApitudeTransfer\Model\RouteRequest[] $body routeRequests (required)
     * @param  string $language language iso code of response (required)
     * @param  int $adults number of adults (required)
     * @param  int $children number of children (required)
     * @param  int $infants number of infants (required)
     * @param  string $vehicle Used for filtering results. Availability routes can be filtered by vehicle. (optional)
     * @param  string $type Used for filtering results. Availability routes can be filtered by type. (optional)
     * @param  string $category Used for filtering results. Availability routes can be filtered by category. (optional)
     * @param  bool $allow_partial_results Show the results of the routes including no results or exception errors (optional, default to true)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function availability2AsyncWithHttpInfo($body, $language, $adults, $children, $infants, $vehicle = null, $type = null, $category = null, $allow_partial_results = 'true')
    {
        $returnType = '\EmanuelBuss\ApitudeTransfer\Model\AvailabilityResponse';
        $request = $this->availability2Request($body, $language, $adults, $children, $infants, $vehicle, $type, $category, $allow_partial_results);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'availability2'
     *
     * @param  \EmanuelBuss\ApitudeTransfer\Model\RouteRequest[] $body routeRequests (required)
     * @param  string $language language iso code of response (required)
     * @param  int $adults number of adults (required)
     * @param  int $children number of children (required)
     * @param  int $infants number of infants (required)
     * @param  string $vehicle Used for filtering results. Availability routes can be filtered by vehicle. (optional)
     * @param  string $type Used for filtering results. Availability routes can be filtered by type. (optional)
     * @param  string $category Used for filtering results. Availability routes can be filtered by category. (optional)
     * @param  bool $allow_partial_results Show the results of the routes including no results or exception errors (optional, default to true)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function availability2Request($body, $language, $adults, $children, $infants, $vehicle = null, $type = null, $category = null, $allow_partial_results = 'true')
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling availability2'
            );
        }
        // verify the required parameter 'language' is set
        if ($language === null || (is_array($language) && count($language) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $language when calling availability2'
            );
        }
        // verify the required parameter 'adults' is set
        if ($adults === null || (is_array($adults) && count($adults) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $adults when calling availability2'
            );
        }
        // verify the required parameter 'children' is set
        if ($children === null || (is_array($children) && count($children) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $children when calling availability2'
            );
        }
        // verify the required parameter 'infants' is set
        if ($infants === null || (is_array($infants) && count($infants) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $infants when calling availability2'
            );
        }

        $resourcePath = '/availability/routes/{language}/{adults}/{children}/{infants}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($vehicle !== null) {
            $queryParams['vehicle'] = ObjectSerializer::toQueryValue($vehicle, null);
        }
        // query params
        if ($type !== null) {
            $queryParams['type'] = ObjectSerializer::toQueryValue($type, null);
        }
        // query params
        if ($category !== null) {
            $queryParams['category'] = ObjectSerializer::toQueryValue($category, null);
        }
        // query params
        if ($allow_partial_results !== null) {
            $queryParams['allowPartialResults'] = ObjectSerializer::toQueryValue($allow_partial_results, null);
        }

        // path params
        if ($language !== null) {
            $resourcePath = str_replace(
                '{' . 'language' . '}',
                ObjectSerializer::toPathValue($language),
                $resourcePath
            );
        }
        // path params
        if ($adults !== null) {
            $resourcePath = str_replace(
                '{' . 'adults' . '}',
                ObjectSerializer::toPathValue($adults),
                $resourcePath
            );
        }
        // path params
        if ($children !== null) {
            $resourcePath = str_replace(
                '{' . 'children' . '}',
                ObjectSerializer::toPathValue($children),
                $resourcePath
            );
        }
        // path params
        if ($infants !== null) {
            $resourcePath = str_replace(
                '{' . 'infants' . '}',
                ObjectSerializer::toPathValue($infants),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json;charset=UTF-8']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json;charset=UTF-8'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Api-key');
        if ($apiKey !== null) {
            $headers['Api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
